
name: CI_CD_Dev

on:
  push:
    branches:
      - master
      - FluxV2
      - release/*


jobs:
  Build_Push_Azure_Vote_App_Image:
    runs-on: ubuntu-20.04
    env:
      SRC_FOLDER: azure-vote
      IMAGE_REPO_NAME: azvote
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Frontend Image Tags
      env:
        SOURCE_LOCATION: src/azure-vote-front 
        DOCKER_FILE: Dockerfile
        IMAGE_NAME: azure-vote-front
        TASKNAME: FRONTEND_IMAGE
        AZ_ACR_NAME: ${{ secrets.AZ_ACR_NAME }}   
      run: |
          echo "============================="
          echo "============================="
          az acr repository list -n $AZ_ACR_NAME
          echo "============================="
          az acr repository show -n $AZ_ACR_NAME --image azvote/azure-vote-back
          echo "============================="
          echo "Image: $IMAGE_REPO_NAME/$IMAGE_NAME"
          echo "============================="
          chmod +x $GITHUB_WORKSPACE/utils/buildContainerTemplate.sh
          $GITHUB_WORKSPACE/utils/buildContainerTemplate.sh -f $SRC_FOLDER \
                                                           -g $GITHUB_WORKSPACE \
                                                           -s $SOURCE_LOCATION \
                                                           -u $AZ_ACR_NAME \
                                                           -r $IMAGE_REPO_NAME/$IMAGE_NAME \
                                                           -t $TASKNAME \
                                                           -d $DOCKER_FILE
    - name: Create Backend Image Tags
      env:
        SOURCE_LOCATION: src/azure-vote-back
        DOCKER_FILE: Dockerfile
        IMAGE_NAME: azure-vote-back
        TASKNAME: BACKEND_IMAGE
        AZ_ACR_NAME: ${{ secrets.AZ_ACR_NAME }}   
      run: |
          chmod +x $GITHUB_WORKSPACE/utils/buildContainerTemplate.sh
          echo "Image: $IMAGE_REPO_NAME/$IMAGE_NAME"
          echo "============================="
          $GITHUB_WORKSPACE/utils/buildContainerTemplate.sh -f $SRC_FOLDER \
                                                           -g $GITHUB_WORKSPACE \
                                                           -s $SOURCE_LOCATION \
                                                           -u $AZ_ACR_NAME \
                                                           -r $IMAGE_REPO_NAME/$IMAGE_NAME \
                                                           -t $TASKNAME \
                                                           -d $DOCKER_FILE

    - name: Upload Image Tags
      uses: actions/upload-artifact@v2.2.2
      with:
        name: image_tags
        path: ${{ github.workspace }}/image_tags
    - name: Upload Manifests Templates
      uses: actions/upload-artifact@v2.2.2
      with:
        name: manifests
        path: ${{ github.workspace }}/azure-vote/manifests
    - name: Upload Utils
      uses: actions/upload-artifact@v2.2.2
      with:
        name: utils
        path: ${{ github.workspace }}/utils
        
  Deploy_to_Dev:
    name: "Deploy to Dev"
    runs-on: ubuntu-latest
    needs: Build_Push_Azure_Vote_App_Image
    environment: az-vote-app-dev
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Download Image Tags
      uses: actions/download-artifact@v2.0.8
      with:
        name: image_tags
        path: ${{ github.workspace }}/image_tags

    - name: Download Manifests Templates
      uses: actions/download-artifact@v2.0.8
      with:
        name: manifests
        path: ${{ github.workspace }}/manifests

    - name: Download Utils
      uses: actions/download-artifact@v2.0.8
      with:
        name: utils
        path: ${{ github.workspace }}/utils

    - name: Read Image Tags
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      run: |
        for file in ${{ github.workspace }}/image_tags/*; do echo "::set-env name=${file##*/}::$(cat $file)"; done 
    
    - name: Generate Manifests
      run: |
        ${{ github.workspace }}/utils/generate-manifests.sh manifests gen_manifests
      env:
        TARGET_NAMESPACE: ${{ secrets.TARGET_NAMESPACE }}
        # VOTE_APP_TITLE: ${{ secrets.VOTE_APP_TITLE }}
        VOTE_APP_TITLE : "Voting Application"
        DEMO_APP_URL: ${{ secrets.DEMO_APP_URL }}
        # AZURE_VOTE_IMAGE_REPO: ${{ secrets.AZ_ACR_NAME }}/.azurecr.io/${{ env.IMAGE_REPO_NAME }}
        AZURE_VOTE_IMAGE_REPO: mtjacr001.azurecr.io/${{ env.IMAGE_REPO_NAME }}
        SYSTEM_LABEL: ${{ secrets.SYSTEM_LABEL }}
    
    # - uses: actions/create-github-app-token@v1
    #   id: app-token
    #   with: 
    #     app-id: ${{ secrets.GH_ID_01 }}
    #     private-key: ${{ secrets.GH_KEY_01 }}

    - name: Generate a token
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.GH_ID_01 }}
        private-key: ${{ secrets.GH_KEY_01 }}

    - name: Use the token
      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      run: |
        gh api octocat

    - name: Create PR
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        # GH_TOKEN: "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"
        MANIFESTS_FOLDER: arc-cicd-cluster
        MANIFESTS_REPO: https://github.com/manojtjacobs/gitops-code
        MANIFESTS_BRANCH: master
        ENVIRONMENT_NAME: Dev
      run: |
        # Extract release number from the branch name
        
        # If it is a release branch, add a prefix to the manifests branch

        echo $GITHUB_REF | awk -F"release/" '{print $2}' 
        release_number=$(echo $GITHUB_REF | awk -F"release/" '{print $2}')
        [[ -z "$release_number" ]] || release_prefix=release/$release_number/  

        ${{ github.workspace }}/utils/create-pr.sh -s ${{ github.workspace }}/gen_manifests -d $MANIFESTS_FOLDER -r $MANIFESTS_REPO -b $(echo $release_prefix)$MANIFESTS_BRANCH -i $GITHUB_RUN_ID -t $GH_TOKEN -e $ENVIRONMENT_NAME
        echo "Push to the deploy branch $deploy_branch_name"
        echo "git push --set-upstream $repo_url $deploy_branch_name"
        git push --set-upstream $repo_url $deploy_branch_name
        DEST_BRANCH=$(echo $release_prefix)$MANIFESTS_BRANCH
        echo "Dest_branch: $(echo $release_prefix)$MANIFESTS_BRANCH"
        echo "DEST_BRANCH: $DEST_BRANCH"
        # Create a PR 
        echo "Create a PR to $DEST_BRANCH"
        DEPLOY_ID=$GITHUB_RUN_I
        ENV_NAME=$ENVIRONMENT_NAME
        
        owner_repo="${DEST_REPO#https://github.com/}"
        echo $owner_repo
        # GITHUB_TOKEN=$TOKEN
        # echo $GITHUB_TOKEN | gh auth login --with-token
        gh pr create --base $DEST_BRANCH --head $deploy_branch_name --title "deployment '$DEPLOY_ID'" --body "Deploy to '$ENV_NAME'"
